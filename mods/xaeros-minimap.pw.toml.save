name = "Xaero's Minimap"
filename = "Xaeros_Minimap_25.2.6_NeoForge_1.21.jar"
side = "both"
{
  "size": {
    "tokens": 39180,
    "totalTokens": 39208,
    "characters": 196040,
    "lines": 4928
  },
  "tree": {
    ".github": {
      "workflows": {
        "pr.yml": null,
        "release.yml": null,
        "snapshot.yml": null
      }
    },
    ".gitignore": null,
    "LICENSE": null,
    "README.md": null,
    "build.gradle.kts": null,
    "gradle": {
      "wrapper": {
        "gradle-wrapper.jar": null,
        "gradle-wrapper.properties": null
      }
    },
    "gradlew": null,
    "gradlew.bat": null,
    "settings.gradle": null,
    "src": {
      "main": {
        "java": {
          "link": {
            "infra": {
              "packwiz": {
                "installer": {
                  "RequiresBootstrap.java": null,
                  "metadata": {
                    "hash": {
                      "Murmur2Lib.java": null
                    }
                  }
                }
              }
            }
          }
        },
        "kotlin": {
          "link": {
            "infra": {
              "packwiz": {
                "installer": {
                  "DevMain.kt": null,
                  "DownloadTask.kt": null,
                  "LauncherUtils.kt": null,
                  "Main.kt": null,
                  "UpdateManager.kt": null,
                  "metadata": {
                    "DownloadMode.kt": null,
                    "EfficientBooleanAdapter.kt": null,
                    "IndexFile.kt": null,
                    "ManifestFile.kt": null,
                    "ModFile.kt": null,
                    "PackFile.kt": null,
                    "PackFormat.kt": null,
                    "curseforge": {
                      "CurseForgeSourcer.kt": null,
                      "CurseForgeUpdateData.kt": null,
                      "UpdateData.kt": null,
                      "UpdateDeserializer.kt": null
                    },
                    "hash": {
                      "Hash.kt": null,
                      "HashFormat.kt": null,
                      "HasherSource.kt": null,
                      "Murmur2HasherSource.kt": null
                    }
                  },
                  "request": {
                    "RequestExceptions.kt": null
                  },
                  "target": {
                    "CachedTarget.kt": null,
                    "CachedTargetValidation.kt": null,
                    "ClientHolder.kt": null,
                    "CurrentOs.kt": null,
                    "OS.kt": null,
                    "OverwriteMode.kt": null,
                    "Side.kt": null,
                    "Target.kt": null,
                    "ValidityToken.kt": null,
                    "path": {
                      "HttpUrlPath.kt": null,
                      "PackwizFilePath.kt": null,
                      "PackwizPath.kt": null
                    }
                  },
                  "task": {
                    "CacheKey.kt": null,
                    "CacheManager.kt": null,
                    "Task.kt": null,
                    "TaskCombinedResult.kt": null,
                    "TaskContext.kt": null,
                    "TaskInput.kt": null,
                    "formats": {
                      "packwizv1": {
                        "PackwizV1PackFile.kt": null,
                        "PackwizV1PackTomlTask.kt": null
                      }
                    }
                  },
                  "ui": {
                    "IUserInterface.kt": null,
                    "cli": {
                      "CLIHandler.kt": null
                    },
                    "data": {
                      "ExceptionDetails.kt": null,
                      "IOptionDetails.kt": null,
                      "InstallProgress.kt": null
                    },
                    "gui": {
                      "ExceptionListWindow.kt": null,
                      "GUIHandler.kt": null,
                      "InstallWindow.kt": null,
                      "OptionTempHandler.kt": null,
                      "OptionsSelectWindow.kt": null
                    }
                  },
                  "util": {
                    "4KDelegation.kt": null,
                    "Log.kt": null
                  }
                }
              }
            }
          }
        },
        "proguard.txt": null,
        "resources": {
          "META-INF": {
            "LICENSES.md": null
          }
        }
      }
    }
  },
  "files": {
    "/.github/workflows/pr.yml": {
      "type": "content",
      "content": "name: Java Gradle Build\n\non:\n  pull_request\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          fetch-depth: 0\n      - name: Set up JDK 8\n        uses: actions/setup-java@v2\n        with:\n          java-version: '8'\n          distribution: 'temurin'\n          cache: gradle\n      - name: Build with Gradle\n        run: ./gradlew build\n      - name: Cleanup Gradle Cache\n        # Remove some files from the Gradle cache, so they aren't cached by GitHub Actions.\n        # Restoring these files from a GitHub Actions cache might cause problems for future builds.\n        run: |\n          rm -f ~/.gradle/caches/modules-2/modules-2.lock\n          rm -f ~/.gradle/caches/modules-2/gc.properties",
      "hash": "94e8e905f919fde7bb047b66b3c4674f77352a03f6e4fe1c148084529c2c6dbb",
      "size": 752,
      "json": {
        "name": "Java Gradle Build",
        "on": "pull_request",
        "jobs": {
          "build": {
            "runs-on": "ubuntu-latest",
            "steps": [
              {
                "uses": "actions/checkout@v2",
                "with": {
                  "fetch-depth": 0
                }
              },
              {
                "name": "Set up JDK 8",
                "uses": "actions/setup-java@v2",
                "with": {
                  "java-version": "8",
                  "distribution": "temurin",
                  "cache": "gradle"
                }
              },
              {
                "name": "Build with Gradle",
                "run": "./gradlew build"
              },
              {
                "name": "Cleanup Gradle Cache",
                "run": "rm -f ~/.gradle/caches/modules-2/modules-2.lock\nrm -f ~/.gradle/caches/modules-2/gc.properties\n"
              }
            ]
          }
        }
      }
    },
    "/.github/workflows/release.yml": {
      "type": "content",
      "content": "name: Java Gradle Release\n\non:\n  push:\n    tags:\n      - 'v\\d+.\\d+.\\d+'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          fetch-depth: 0\n      - name: Set up JDK 8\n        uses: actions/setup-java@v2\n        with:\n          java-version: '8'\n          distribution: 'temurin'\n          cache: gradle\n      - name: Publish with Gradle\n        run: ./gradlew publish -Pgithub.token=\"${{ secrets.GITHUB_TOKEN }}\" -Pbunnycdn.token=\"${{ secrets.BUNNYCDN_TOKEN }}\" -Prelease=true\n      - name: Cleanup Gradle Cache\n        # Remove some files from the Gradle cache, so they aren't cached by GitHub Actions.\n        # Restoring these files from a GitHub Actions cache might cause problems for future builds.\n        run: |\n          rm -f ~/.gradle/caches/modules-2/modules-2.lock\n          rm -f ~/.gradle/caches/modules-2/gc.properties",
      "hash": "9d729b2df2df6191bb88634b00560013b6f2f280162c176f28dc692bcb765467",
      "size": 893,
      "json": {
        "name": "Java Gradle Release",
        "on": {
          "push": {
            "tags": [
              "v\\d+.\\d+.\\d+"
            ]
          }
        },
        "jobs": {
          "build": {
            "runs-on": "ubuntu-latest",
            "steps": [
              {
                "uses": "actions/checkout@v2",
                "with": {
                  "fetch-depth": 0
                }
              },
              {
                "name": "Set up JDK 8",
                "uses": "actions/setup-java@v2",
                "with": {
                  "java-version": "8",
                  "distribution": "temurin",
                  "cache": "gradle"
                }
              },
              {
                "name": "Publish with Gradle",
                "run": "./gradlew publish -Pgithub.token=\"${{ secrets.GITHUB_TOKEN }}\" -Pbunnycdn.token=\"${{ secrets.BUNNYCDN_TOKEN }}\" -Prelease=true"
              },
              {
                "name": "Cleanup Gradle Cache",
                "run": "rm -f ~/.gradle/caches/modules-2/modules-2.lock\nrm -f ~/.gradle/caches/modules-2/gc.properties\n"
              }
            ]
          }
        }
      }
    },
    "/.github/workflows/snapshot.yml": {
      "type": "content",
      "content": "name: Java Gradle Snapshot\n\non:\n  push:\n    branches:\n      - 'main'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          fetch-depth: 0\n      - name: Set up JDK 8\n        uses: actions/setup-java@v2\n        with:\n          java-version: '8'\n          distribution: 'temurin'\n          cache: gradle\n      - name: Publish with Gradle\n        run: ./gradlew publish -Pgithub.token=\"${{ secrets.GITHUB_TOKEN }}\" -Pbunnycdn.token=\"${{ secrets.BUNNYCDN_TOKEN }}\"\n      - name: Cleanup Gradle Cache\n        # Remove some files from the Gradle cache, so they aren't cached by GitHub Actions.\n        # Restoring these files from a GitHub Actions cache might cause problems for future builds.\n        run: |\n          rm -f ~/.gradle/caches/modules-2/modules-2.lock\n          rm -f ~/.gradle/caches/modules-2/gc.properties",
      "hash": "6fca8d9bee6a0058ddce2341e8c9d3cdf0ca10f3680fe5eb665d47372ba9ab35",
      "size": 875,
      "json": {
        "name": "Java Gradle Snapshot",
        "on": {
          "push": {
            "branches": [
              "main"
            ]
          }
        },
        "jobs": {
          "build": {
            "runs-on": "ubuntu-latest",
            "steps": [
              {
                "uses": "actions/checkout@v2",
                "with": {
                  "fetch-depth": 0
                }
              },
              {
                "name": "Set up JDK 8",
                "uses": "actions/setup-java@v2",
                "with": {
                  "java-version": "8",
                  "distribution": "temurin",
                  "cache": "gradle"
                }
              },
              {
                "name": "Publish with Gradle",
                "run": "./gradlew publish -Pgithub.token=\"${{ secrets.GITHUB_TOKEN }}\" -Pbunnycdn.token=\"${{ secrets.BUNNYCDN_TOKEN }}\""
              },
              {
                "name": "Cleanup Gradle Cache",
                "run": "rm -f ~/.gradle/caches/modules-2/modules-2.lock\nrm -f ~/.gradle/caches/modules-2/gc.properties\n"
              }
            ]
          }
        }
      }
    },
    "/.gitignore": {
      "type": "content",
      "content": "\n# Created by https://www.toptal.com/developers/gitignore/api/java,gradle,intellij+all\n# Edit at https://www.toptal.com/developers/gitignore?templates=java,gradle,intellij+all\n\n### Intellij+all ###\n# Covers JetBrains IDEs: IntelliJ, RubyMine, PhpStorm, AppCode, PyCharm, CLion, Android Studio, WebStorm and Rider\n# Reference: https://intellij-support.jetbrains.com/hc/en-us/articles/206544839\n\n# User-specific stuff\n.idea/**/workspace.xml\n.idea/**/tasks.xml\n.idea/**/usage.statistics.xml\n.idea/**/dictionaries\n.idea/**/shelf\n\n# Generated files\n.idea/**/contentModel.xml\n\n# Sensitive or high-churn files\n.idea/**/dataSources/\n.idea/**/dataSources.ids\n.idea/**/dataSources.local.xml\n.idea/**/sqlDataSources.xml\n.idea/**/dynamic.xml\n.idea/**/uiDesigner.xml\n.idea/**/dbnavigator.xml\n\n# Gradle\n.idea/**/gradle.xml\n.idea/**/libraries\n\n# Gradle and Maven with auto-import\n# When using Gradle or Maven with auto-import, you should exclude module files,\n# since they will be recreated, and may cause churn.  Uncomment if using\n# auto-import.\n# .idea/artifacts\n# .idea/compiler.xml\n# .idea/jarRepositories.xml\n# .idea/modules.xml\n# .idea/*.iml\n# .idea/modules\n# *.iml\n# *.ipr\n\n# CMake\ncmake-build-*/\n\n# Mongo Explorer plugin\n.idea/**/mongoSettings.xml\n\n# File-based project format\n*.iws\n\n# IntelliJ\nout/\n\n# mpeltonen/sbt-idea plugin\n.idea_modules/\n\n# JIRA plugin\natlassian-ide-plugin.xml\n\n# Cursive Clojure plugin\n.idea/replstate.xml\n\n# Crashlytics plugin (for Android Studio and IntelliJ)\ncom_crashlytics_export_strings.xml\ncrashlytics.properties\ncrashlytics-build.properties\nfabric.properties\n\n# Editor-based Rest Client\n.idea/httpRequests\n\n# Android studio 3.1+ serialized cache file\n.idea/caches/build_file_checksums.ser\n\n### Intellij+all Patch ###\n# Ignores the whole .idea folder and all .iml files\n# See https://github.com/joeblau/gitignore.io/issues/186 and https://github.com/joeblau/gitignore.io/issues/360\n\n.idea/\n\n# Reason: https://github.com/joeblau/gitignore.io/issues/186#issuecomment-249601023\n\n*.iml\nmodules.xml\n.idea/misc.xml\n*.ipr\n\n# Sonarlint plugin\n.idea/sonarlint\n\n### Java ###\n# Compiled class file\n*.class\n\n# Log file\n*.log\n\n# BlueJ files\n*.ctxt\n\n# Mobile Tools for Java (J2ME)\n.mtj.tmp/\n\n# Package Files #\n*.jar\n*.war\n*.nar\n*.ear\n*.zip\n*.tar.gz\n*.rar\n\n# virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml\nhs_err_pid*\n\n### Gradle ###\n.gradle\nbuild/\n\n# Ignore Gradle GUI config\ngradle-app.setting\n\n# Avoid ignoring Gradle wrapper jar file (.jar files are usually ignored)\n!gradle-wrapper.jar\n\n# Cache of project\n.gradletasknamecache\n\n# # Work around https://youtrack.jetbrains.com/issue/IDEA-116898\n# gradle/wrapper/gradle-wrapper.properties\n\n### Gradle Patch ###\n**/build/\n\n# End of https://www.toptal.com/developers/gitignore/api/java,gradle,intellij+all\n",
      "hash": "2e50b48f8ee97b03cff9e24950a3a12b7f78294a136a39b15148a5553470fd45",
      "size": 2806
    },
    "/LICENSE": {
      "type": "content",
      "content": "MIT License\n\nCopyright (c) 2021 comp500\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.",
      "hash": "a15b722afd9d249a079c7e462ce96d20b401349e911860ca1853eaf7680e8a94",
      "size": 1063
    },
    "/README.md": {
      "type": "content",
      "content": "# packwiz-installer\nAn installer for launching packwiz modpacks with MultiMC. You'll need [the bootstrapper](https://github.com/comp500/packwiz-installer-bootstrap/releases) to actually use this.\n",
      "hash": "3265773742bc01a368d91df9a09f96ca89f6218e9098b8c477f16188a1585eb4",
      "size": 196
    },
    "/build.gradle.kts": {
      "type": "content",
      "content": "plugins {\n\tjava\n\tapplication\n\tid(\"com.github.johnrengelman.shadow\") version \"7.1.2\"\n\tid(\"com.palantir.git-version\") version \"0.13.0\"\n\tid(\"com.github.breadmoirai.github-release\") version \"2.4.1\"\n\tkotlin(\"jvm\") version \"1.7.10\"\n\tid(\"com.github.jk1.dependency-license-report\") version \"2.0\"\n\t`maven-publish`\n}\n\njava {\n\tsourceCompatibility = JavaVersion.VERSION_1_8\n}\n\nrepositories {\n\tmavenCentral()\n\tgoogle()\n\tmaven {\n\t\turl = uri(\"https://jitpack.io\")\n\t}\n}\n\nval r8 by configurations.creating\nval distJarOutput by configurations.creating {\n\tisCanBeResolved = false\n\tisCanBeConsumed = true\n\n\tattributes {\n\t\tattribute(Usage.USAGE_ATTRIBUTE, project.objects.named(Usage::class.java, Usage.JAVA_RUNTIME))\n\t\tattribute(Bundling.BUNDLING_ATTRIBUTE, project.objects.named(Bundling::class.java, Bundling.EMBEDDED))\n\t}\n}\n\ndependencies {\n\timplementation(\"commons-cli:commons-cli:1.5.0\")\n\timplementation(\"com.google.code.gson:gson:2.9.0\")\n\timplementation(\"com.squareup.okio:okio:3.1.0\")\n\timplementation(kotlin(\"stdlib-jdk8\"))\n\timplementation(\"com.squareup.okhttp3:okhttp:4.10.0\")\n\timplementation(\"cc.ekblad:4koma:1.1.0\")\n\n\tr8(\"com.android.tools:r8:3.3.28\")\n}\n\napplication {\n\tmainClass.set(\"link.infra.packwiz.installer.RequiresBootstrap\")\n}\n\nval gitVersion: groovy.lang.Closure<*> by extra\nversion = gitVersion()\n\ntasks.jar {\n\tmanifest {\n\t\tattributes[\"Main-Class\"] = \"link.infra.packwiz.installer.RequiresBootstrap\"\n\t\tattributes[\"Implementation-Version\"] = project.version\n\t}\n}\n\nlicenseReport {\n\trenderers = arrayOf<com.github.jk1.license.render.ReportRenderer>(\n\t\tcom.github.jk1.license.render.InventoryMarkdownReportRenderer(\"licenses.md\", \"packwiz-installer\")\n\t)\n\tfilters = arrayOf<com.github.jk1.license.filter.DependencyFilter>(com.github.jk1.license.filter.LicenseBundleNormalizer())\n}\n\ntasks.shadowJar {\n\t// 4koma uses kotlin-reflect; requires Kotlin metadata\n\t//exclude(\"**/*.kotlin_metadata\")\n\t//exclude(\"**/*.kotlin_builtins\")\n\texclude(\"META-INF/maven/**/*\")\n\texclude(\"META-INF/proguard/**/*\")\n\n\t// Relocate Commons CLI, so that it doesn't clash with old packwiz-installer-bootstrap (that shades it)\n\trelocate(\"org.apache.commons.cli\", \"link.infra.packwiz.installer.deps.commons-cli\")\n\n\t// from Commons CLI\n\texclude(\"META-INF/LICENSE.txt\")\n\texclude(\"META-INF/NOTICE.txt\")\n}\n\nval shrinkJar by tasks.registering(JavaExec::class) {\n\tval rules = file(\"src/main/proguard.txt\")\n\tval r8File = base.libsDirectory.file(provider {\n\t\tbase.archivesName.get() + \"-\" + project.version + \"-all-shrink.jar\"\n\t})\n\tdependsOn(configurations.named(\"runtimeClasspath\"))\n\tinputs.files(tasks.shadowJar, rules)\n\toutputs.file(r8File)\n\n\tclasspath(r8)\n\tmainClass.set(\"com.android.tools.r8.R8\")\n\targs = mutableListOf(\n\t\t\"--release\",\n\t\t\"--classfile\",\n\t\t\"--output\", r8File.get().toString(),\n\t\t\"--pg-conf\", rules.toString(),\n\t\t\"--lib\", System.getProperty(\"java.home\"),\n\t\t*(if (System.getProperty(\"java.version\").startsWith(\"1.\")) {\n\t\t\t// javax.crypto, necessary on <1.9 for compiling Okio\n\t\t\tarrayOf(\"--lib\", System.getProperty(\"java.home\") + \"/lib/jce.jar\")\n\t\t} else { arrayOf() }),\n\t\ttasks.shadowJar.get().archiveFile.get().asFile.toString()\n\t)\n}\n\n// MANIFEST.MF must be one of the first 2 entries in the zip for JarInputStream to see it\n// Gradle's JAR creation handles this whereas R8 doesn't, so the dist JAR is repacked\nval distJar by tasks.registering(Jar::class) {\n\tfrom(shrinkJar.map { zipTree(it.outputs.files.singleFile) })\n\tarchiveClassifier.set(\"all-repacked\")\n\tmanifest {\n\t\tfrom(shrinkJar.map { zipTree(it.outputs.files.singleFile).matching {\n\t\t\tinclude(\"META-INF/MANIFEST.MF\")\n\t\t}.singleFile })\n\t}\n}\n\nartifacts {\n\tadd(\"distJarOutput\", distJar) {\n\t\tclassifier = \"dist\"\n\t}\n}\n\n// Used for vscode launch.json\nval copyJar by tasks.registering(Copy::class) {\n\tfrom(distJar)\n\trename(\"packwiz-installer-(.*)\\\\.jar\", \"packwiz-installer.jar\")\n\tinto(layout.buildDirectory.dir(\"dist\"))\n\toutputs.file(layout.buildDirectory.dir(\"dist\").map { it.file(\"packwiz-installer.jar\") })\n}\n\ntasks.build {\n\tdependsOn(copyJar)\n}\n\ngithubRelease {\n\towner(\"comp500\")\n\trepo(\"packwiz-installer\")\n\ttagName(\"${project.version}\")\n\treleaseName(\"Release ${project.version}\")\n\tdraft(true)\n\ttoken(findProperty(\"github.token\") as String?)\n\treleaseAssets(layout.buildDirectory.dir(\"dist\").map { it.file(\"packwiz-installer.jar\") }.get())\n}\n\ntasks.githubRelease {\n\tdependsOn(copyJar)\n\tenabled = project.hasProperty(\"github.token\") && project.findProperty(\"release\") == \"true\"\n}\n\ntasks.publish {\n\tdependsOn(tasks.githubRelease)\n}\n\ntasks.compileKotlin {\n\tkotlinOptions {\n\t\tjvmTarget = \"1.8\"\n\t\tfreeCompilerArgs = listOf(\"-Xjvm-default=all\", \"-Xallow-result-return-type\", \"-opt-in=kotlin.io.path.ExperimentalPathApi\", \"-Xlambdas=indy\")\n\t}\n}\ntasks.compileTestKotlin {\n\tkotlinOptions {\n\t\tjvmTarget = \"1.8\"\n\t\tfreeCompilerArgs = listOf(\"-Xjvm-default=all\", \"-Xallow-result-return-type\", \"-opt-in=kotlin.io.path.ExperimentalPathApi\", \"-Xlambdas=indy\")\n\t}\n}\n\nval javaComponent = components[\"java\"] as AdhocComponentWithVariants\njavaComponent.addVariantsFromConfiguration(distJarOutput) {\n\tmapToMavenScope(\"runtime\")\n\tmapToOptional()\n}\njavaComponent.withVariantsFromConfiguration(configurations[\"shadowRuntimeElements\"]) {\n\tskip()\n}\n\nif (project.hasProperty(\"bunnycdn.token\")) {\n\tpublishing {\n\t\tpublications {\n\t\t\tcreate<MavenPublication>(\"maven\") {\n\t\t\t\tgroupId = \"link.infra.packwiz\"\n\t\t\t\tartifactId = \"packwiz-installer\"\n\n\t\t\t\tfrom(components[\"java\"])\n\t\t\t}\n\t\t}\n\t\trepositories {\n\t\t\tmaven {\n\t\t\t\turl = if (project.findProperty(\"release\") == \"true\") {\n\t\t\t\t\turi(\"https://storage.bunnycdn.com/comp-maven/repository/release\")\n\t\t\t\t} else {\n\t\t\t\t\turi(\"https://storage.bunnycdn.com/comp-maven/repository/snapshot\")\n\t\t\t\t}\n\t\t\t\tcredentials(HttpHeaderCredentials::class) {\n\t\t\t\t\tname = \"AccessKey\"\n\t\t\t\t\tvalue = findProperty(\"bunnycdn.token\") as String?\n\t\t\t\t}\n\t\t\t\tauthentication {\n\t\t\t\t\tcreate<HttpHeaderAuthentication>(\"header\")\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n",
      "hash": "b1d396f352a8ecbb8c7f148b60fafad5a6448aea11ead52a2c9e56fd7e49309e",
      "size": 5856
    },
    "/gradle/wrapper/gradle-wrapper.jar": {
      "type": "binary",
      "hash": "33ad4583fd7ee156f533778736fa1b4940bd83b433934d1cc4e9f608e99a6a89",
      "size": 59536,
      "url": "https://raw.githubusercontent.com/codecraft3r/packwiz-installer/92ea4723435a4b41b2e79b501f5e8c75950a009f/gradle/wrapper/gradle-wrapper.jar"
    },
    "/gradle/wrapper/gradle-wrapper.properties": {
      "type": "content",
      "content": "distributionBase=GRADLE_USER_HOME\ndistributionPath=wrapper/dists\ndistributionUrl=https\\://services.gradle.org/distributions/gradle-7.5-bin.zip\nzipStoreBase=GRADLE_USER_HOME\nzipStorePath=wrapper/dists\n",
      "hash": "bb5eb08550f0d4d46c86ba6747b3ce51a0cc6824a61ebb96fba7b1c69c320fcd",
      "size": 200
    },
    "/gradlew": {
      "type": "binary",
      "hash": "e50fdeead84a9fe8efaa6545d0641a6a39ebdad2a0558ea4e48be3135899eb50",
      "size": 8047,
      "url": "https://raw.githubusercontent.com/codecraft3r/packwiz-installer/92ea4723435a4b41b2e79b501f5e8c75950a009f/gradlew"
    },
    "/gradlew.bat": {
      "type": "content",
      "content": "@rem\n@rem Copyright 2015 the original author or authors.\n@rem\n@rem Licensed under the Apache License, Version 2.0 (the \"License\");\n@rem you may not use this file except in compliance with the License.\n@rem You may obtain a copy of the License at\n@rem\n@rem      https://www.apache.org/licenses/LICENSE-2.0\n@rem\n@rem Unless required by applicable law or agreed to in writing, software\n@rem distributed under the License is distributed on an \"AS IS\" BASIS,\n@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@rem See the License for the specific language governing permissions and\n@rem limitations under the License.\n@rem\n\n@if \"%DEBUG%\" == \"\" @echo off\n@rem ##########################################################################\n@rem\n@rem  Gradle startup script for Windows\n@rem\n@rem ##########################################################################\n\n@rem Set local scope for the variables with windows NT shell\nif \"%OS%\"==\"Windows_NT\" setlocal\n\nset DIRNAME=%~dp0\nif \"%DIRNAME%\" == \"\" set DIRNAME=.\nset APP_BASE_NAME=%~n0\nset APP_HOME=%DIRNAME%\n\n@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter.\nfor %%i in (\"%APP_HOME%\") do set APP_HOME=%%~fi\n\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nset DEFAULT_JVM_OPTS=\"-Xmx64m\" \"-Xms64m\"\n\n@rem Find java.exe\nif defined JAVA_HOME goto findJavaFromJavaHome\n\nset JAVA_EXE=java.exe\n%JAVA_EXE% -version >NUL 2>&1\nif \"%ERRORLEVEL%\" == \"0\" goto execute\n\necho.\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\necho.\necho Please set the JAVA_HOME variable in your environment to match the\necho location of your Java installation.\n\ngoto fail\n\n:findJavaFromJavaHome\nset JAVA_HOME=%JAVA_HOME:\"=%\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\n\nif exist \"%JAVA_EXE%\" goto execute\n\necho.\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%\necho.\necho Please set the JAVA_HOME variable in your environment to match the\necho location of your Java installation.\n\ngoto fail\n\n:execute\n@rem Setup the command line\n\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\n\n\n@rem Execute Gradle\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %*\n\n:end\n@rem End local scope for the variables with windows NT shell\nif \"%ERRORLEVEL%\"==\"0\" goto mainEnd\n\n:fail\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\nrem the _cmd.exe /c_ return code!\nif  not \"\" == \"%GRADLE_EXIT_CONSOLE%\" exit 1\nexit /b 1\n\n:mainEnd\nif \"%OS%\"==\"Windows_NT\" endlocal\n\n:omega\n",
      "hash": "c46a27c79007746de5922b17abb6230d64ad8b1ba3ad1585ee5c6543c2a9b129",
      "size": 2674
    },
    "/settings.gradle": {
      "type": "content",
      "content": "/*\n * This file was generated by the Gradle 'init' task.\n *\n * The settings file is used to specify which projects to include in your build.\n * \n * Detailed information about configuring a multi-project build in Gradle can be found\n * in the user guide at https://docs.gradle.org/4.10.3/userguide/multi_project_builds.html\n */\n\nrootProject.name = 'packwiz-installer'\n",
      "hash": "61f1c6c280aa299dd6f435f8b35291d1843198308806c2e6e9da7b9ab4d300f2",
      "size": 367
    },
    "/src/main/java/link/infra/packwiz/installer/RequiresBootstrap.java": {
      "type": "content",
      "content": "package link.infra.packwiz.installer;\n\nimport javax.swing.*;\nimport java.util.Arrays;\n\npublic class RequiresBootstrap {\n\n\tpublic static void main(String[] args) {\n\t\t// Very small CLI implementation, because Commons CLI complains on unexpected\n\t\t// options\n\t\tif (Arrays.stream(args).map(str -> {\n\t\t\tif (str == null) return \"\";\n\t\t\tif (str.startsWith(\"--\")) {\n\t\t\t\treturn str.substring(2);\n\t\t\t}\n\t\t\tif (str.startsWith(\"-\")) {\n\t\t\t\treturn str.substring(1);\n\t\t\t}\n\t\t\treturn \"\";\n\t\t}).anyMatch(str -> str.equals(\"g\") || str.equals(\"no-gui\"))) {\n\t\t\tSystem.out.println(\n\t\t\t\t\t\"This program must be run through packwiz-installer-bootstrap. Use --bootstrap-no-update to disable updating.\");\n\t\t\tSystem.exit(1);\n\t\t} else {\n\t\t\ttry {\n\t\t\t\tUIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n\t\t\t} catch (Exception e) {\n\t\t\t\t// Ignore the exceptions, just continue using the ugly L&F\n\t\t\t}\n\t\t\tJOptionPane.showMessageDialog(null,\n\t\t\t\t\t\"This program must be run through packwiz-installer-bootstrap. Use --bootstrap-no-update to disable updating.\",\n\t\t\t\t\t\"packwiz-installer\", JOptionPane.ERROR_MESSAGE);\n\t\t\tSystem.exit(1);\n\t\t}\n\t}\n\n}\n",
      "hash": "2e441356e0f7ff914be9a165867f2f0d5e5a1b598befbb510cc770b1d3d4f468",
      "size": 1121
    },
    "/src/main/java/link/infra/packwiz/installer/metadata/hash/Murmur2Lib.java": {
      "type": "content",
      "content": "// Obtained from https://github.com/prasanthj/hasher/blob/master/src/main/java/hasher/Murmur2.java\n/**\n *   Copyright 2014 Prasanth Jayachandran\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage link.infra.packwiz.installer.metadata.hash;\n\n/**\n * Murmur2 32 and 64 bit variants.\n * 32-bit Java port of https://code.google.com/p/smhasher/source/browse/trunk/MurmurHash2.cpp#37\n * 64-bit Java port of https://code.google.com/p/smhasher/source/browse/trunk/MurmurHash2.cpp#96\n */\npublic class Murmur2Lib {\n  // Constants for 32-bit variant\n  private static final int M_32 = 0x5bd1e995;\n  private static final int R_32 = 24;\n\n  // Constants for 64-bit variant\n  private static final long M_64 = 0xc6a4a7935bd1e995L;\n  private static final int R_64 = 47;\n  private static final int DEFAULT_SEED = 0;\n\n  /**\n   * Murmur2 32-bit variant.\n   *\n   * @param data - input byte array\n   * @return - hashcode\n   */\n  public static int hash32(byte[] data) {\n    return hash32(data, data.length, DEFAULT_SEED);\n  }\n\n  /**\n   * Murmur2 32-bit variant.\n   *\n   * @param data   - input byte array\n   * @param length - length of array\n   * @param seed   - seed. (default 0)\n   * @return - hashcode\n   */\n  public static int hash32(byte[] data, int length, int seed) {\n    int h = seed ^ length;\n    int len_4 = length >> 2;\n\n    // body\n    for (int i = 0; i < len_4; i++) {\n      int i_4 = i << 2;\n      int k = (data[i_4] & 0xff)\n          | ((data[i_4 + 1] & 0xff) << 8)\n          | ((data[i_4 + 2] & 0xff) << 16)\n          | ((data[i_4 + 3] & 0xff) << 24);\n\n      // mix functions\n      k *= M_32;\n      k ^= k >>> R_32;\n      k *= M_32;\n      h *= M_32;\n      h ^= k;\n    }\n\n    // tail\n    int len_m = len_4 << 2;\n    int left = length - len_m;\n    if (left != 0) {\n      if (left >= 3) {\n        h ^= (int) data[length - (left - 2)] << 16;\n      }\n      if (left >= 2) {\n        h ^= (int) data[length - (left - 1)] << 8;\n      }\n      if (left >= 1) {\n        h ^= data[length - left];\n      }\n\n      h *= M_32;\n    }\n\n    // finalization\n    h ^= h >>> 13;\n    h *= M_32;\n    h ^= h >>> 15;\n\n    return h;\n  }\n\n  /**\n   * Murmur2 64-bit variant.\n   *\n   * @param data - input byte array\n   * @return - hashcode\n   */\n  public static long hash64(final byte[] data) {\n    return hash64(data, data.length, DEFAULT_SEED);\n  }\n\n  /**\n   * Murmur2 64-bit variant.\n   *\n   * @param data   - input byte array\n   * @param length - length of array\n   * @param seed   - seed. (default 0)\n   * @return - hashcode\n   */\n  public static long hash64(final byte[] data, int length, int seed) {\n    long h = (seed & 0xffffffffl) ^ (length * M_64);\n    int length8 = length >> 3;\n\n    // body\n    for (int i = 0; i < length8; i++) {\n      final int i8 = i << 3;\n      long k = ((long) data[i8] & 0xff)\n          | (((long) data[i8 + 1] & 0xff) << 8)\n          | (((long) data[i8 + 2] & 0xff) << 16)\n          | (((long) data[i8 + 3] & 0xff) << 24)\n          | (((long) data[i8 + 4] & 0xff) << 32)\n          | (((long) data[i8 + 5] & 0xff) << 40)\n          | (((long) data[i8 + 6] & 0xff) << 48)\n          | (((long) data[i8 + 7] & 0xff) << 56);\n\n      // mix functions\n      k *= M_64;\n      k ^= k >>> R_64;\n      k *= M_64;\n      h ^= k;\n      h *= M_64;\n    }\n\n    // tail\n    int tailStart = length8 << 3;\n    switch (length - tailStart) {\n      case 7:\n        h ^= (long) (data[tailStart + 6] & 0xff) << 48;\n      case 6:\n        h ^= (long) (data[tailStart + 5] & 0xff) << 40;\n      case 5:\n        h ^= (long) (data[tailStart + 4] & 0xff) << 32;\n      case 4:\n        h ^= (long) (data[tailStart + 3] & 0xff) << 24;\n      case 3:\n        h ^= (long) (data[tailStart + 2] & 0xff) << 16;\n      case 2:\n        h ^= (long) (data[tailStart + 1] & 0xff) << 8;\n      case 1:\n        h ^= data[tailStart] & 0xff;\n        h *= M_64;\n    }\n\n    // finalization\n    h ^= h >>> R_64;\n    h *= M_64;\n    h ^= h >>> R_64;\n\n    return h;\n  }\n}",
      "hash": "ba3002ca8293aa879b71ad3827bbf39d896234376fecf1bc315947553032f77c",
      "size": 4429
    },
    "/src/main/kotlin/link/infra/packwiz/installer/DevMain.kt": {
      "type": "content",
      "content": "package link.infra.packwiz.installer\n\nfun main(args: Array<String>) {\n\tMain(args)\n}",
      "hash": "b005d9459f111e8f408ff89839dc29092bffab46d98955df78c1f0699c79f982",
      "size": 83
    },
    "/src/main/kotlin/link/infra/packwiz/installer/DownloadTask.kt": {
      "type": "content",
      "content": "package link.infra.packwiz.installer\n\nimport link.infra.packwiz.installer.metadata.IndexFile\nimport link.infra.packwiz.installer.metadata.ManifestFile\nimport link.infra.packwiz.installer.metadata.hash.Hash\nimport link.infra.packwiz.installer.metadata.hash.HashFormat\nimport link.infra.packwiz.installer.request.RequestException\nimport link.infra.packwiz.installer.target.ClientHolder\nimport link.infra.packwiz.installer.target.CurrentOs\nimport link.infra.packwiz.installer.target.OS\nimport link.infra.packwiz.installer.target.Side\nimport link.infra.packwiz.installer.target.path.PackwizFilePath\nimport link.infra.packwiz.installer.ui.data.ExceptionDetails\nimport link.infra.packwiz.installer.ui.data.IOptionDetails\nimport link.infra.packwiz.installer.util.Log\nimport okio.Buffer\nimport okio.HashingSink\nimport okio.blackholeSink\nimport okio.buffer\nimport java.io.IOException\nimport java.nio.file.Files\nimport java.nio.file.StandardCopyOption\n\ninternal class DownloadTask private constructor(val metadata: IndexFile.File, val index: IndexFile, private val downloadSide: Side) : IOptionDetails {\n\tvar cachedFile: ManifestFile.File? = null\n\t\tprivate set\n\n\tprivate var err: Exception? = null\n\tval exceptionDetails get() = err?.let { e -> ExceptionDetails(name, e) }\n\n\tfun failed() = err != null\n\n\tvar alreadyUpToDate = false\n\t\tprivate set\n\tprivate var metadataRequired = true\n\tprivate var invalidated = false\n\t// If file is new or isOptional changed to true, the option needs to be presented again\n\tprivate var newOptional = true\n\tvar completionStatus = CompletionStatus.INCOMPLETE\n\t\tprivate set\n\n\tenum class CompletionStatus {\n\t\tINCOMPLETE,\n\t\tDOWNLOADED,\n\t\tALREADY_EXISTS_CACHED,\n\t\tALREADY_EXISTS_VALIDATED,\n\t\tSKIPPED_DISABLED,\n\t\tSKIPPED_WRONG_SIDE,\n        SKIPPED_WRONG_OS,\n\t\tDELETED_DISABLED,\n\t\tDELETED_WRONG_SIDE,\n        DELETED_WRONG_OS;\n\t}\n\n\tval isOptional get() = metadata.linkedFile?.option?.optional ?: false\n\n    val currentSide = metadata.linkedFile?.side\n\n\tfun isNewOptional() = isOptional && newOptional\n\n\tfun correctSide() = currentSide?.let { downloadSide.hasSide(it) } ?: true\n\n    fun correctOS(): Boolean {\n        if (downloadSide.hasSide(Side.SERVER)) {\n            // make side always true on server so we don't have problems\n            return true\n        }\n        val excluded = metadata.linkedFile?.excludedOSes ?: return true\n        return !excluded.contains(CurrentOs.current)\n    }\n\n    override val name get() = metadata.name\n\n\t// Ensure that an update is done if it changes from false to true, or from true to false\n\toverride var optionValue: Boolean\n\t\tget() = cachedFile?.optionValue ?: true\n\t\tset(value) {\n\t\t\tif (value && !optionValue) { // Ensure that an update is done if it changes from false to true, or from true to false\n\t\t\t\talreadyUpToDate = false\n\t\t\t}\n\t\t\tcachedFile?.optionValue = value\n\t\t}\n\n\toverride val optionDescription get() = metadata.linkedFile?.option?.description ?: \"\"\n\n\tfun invalidate() {\n\t\tinvalidated = true\n\t\talreadyUpToDate = false\n\t}\n\n\tfun updateFromCache(cachedFile: ManifestFile.File?) {\n\t\tif (err != null) return\n\n\t\tif (cachedFile == null) {\n\t\t\tthis.cachedFile = ManifestFile.File()\n\t\t\treturn\n\t\t}\n\t\tthis.cachedFile = cachedFile\n\t\tif (!invalidated) {\n\t\t\tval currHash = try {\n\t\t\t\tmetadata.getHashObj(index)\n\t\t\t} catch (e: Exception) {\n\t\t\t\terr = e\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif (currHash == cachedFile.hash) { // Already up to date\n\t\t\t\talreadyUpToDate = true\n\t\t\t\tmetadataRequired = false\n\t\t\t\tcompletionStatus = CompletionStatus.ALREADY_EXISTS_CACHED\n\t\t\t}\n\t\t}\n\t\tif (cachedFile.isOptional) {\n\t\t\t// Because option selection dialog might set this task to true/false, metadata is always needed to download\n\t\t\t// the file, and to show the description and name\n\t\t\tmetadataRequired = true\n\t\t}\n\t}\n\n\tfun downloadMetadata(clientHolder: ClientHolder) {\n\t\tif (err != null) return\n\n\t\tif (metadataRequired) {\n\t\t\ttry {\n\t\t\t\t// Retrieve the linked metadata file\n\t\t\t\tmetadata.downloadMeta(index, clientHolder)\n\t\t\t} catch (e: Exception) {\n\t\t\t\terr = e\n\t\t\t\treturn\n\t\t\t}\n\t\t\tcachedFile?.let { cachedFile ->\n\t\t\t\tval linkedFile = metadata.linkedFile\n\t\t\t\tif (linkedFile != null) {\n\t\t\t\t\tif (linkedFile.option.optional) {\n\t\t\t\t\t\tif (cachedFile.isOptional) {\n\t\t\t\t\t\t\t// isOptional didn't change\n\t\t\t\t\t\t\tnewOptional = false\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// isOptional false -> true, set option to it's default value\n\t\t\t\t\t\t\t// TODO: preserve previous option value, somehow??\n\t\t\t\t\t\t\tcachedFile.optionValue = linkedFile.option.defaultValue\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcachedFile.isOptional = isOptional\n\t\t\t\tcachedFile.onlyOtherSide = !correctSide()\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Check if the file in the destination location is already valid\n\t * Must be done after metadata retrieval\n\t */\n\tfun validateExistingFile(packFolder: PackwizFilePath, clientHolder: ClientHolder) {\n\t\tif (!alreadyUpToDate) {\n\t\t\ttry {\n\t\t\t\t// TODO: only do this for files that didn't exist before or have been modified since last full update?\n\t\t\t\tval destPath = metadata.destURI.rebase(packFolder)\n\t\t\t\tdestPath.source(clientHolder).use { src ->\n\t\t\t\t\t// TODO: clean up duplicated code\n\t\t\t\t\tval hash: Hash<*>\n\t\t\t\t\tval fileHashFormat: HashFormat<*>\n\t\t\t\t\tval linkedFile = metadata.linkedFile\n\n\t\t\t\t\tif (linkedFile != null) {\n\t\t\t\t\t\thash = linkedFile.hash\n\t\t\t\t\t\tfileHashFormat = linkedFile.download.hashFormat\n\t\t\t\t\t} else {\n\t\t\t\t\t\thash = metadata.getHashObj(index)\n\t\t\t\t\t\tfileHashFormat = metadata.hashFormat(index)\n\t\t\t\t\t}\n\n\t\t\t\t\tval fileSource = fileHashFormat.source(src)\n\t\t\t\t\tfileSource.buffer().readAll(blackholeSink())\n\t\t\t\t\tif (hash == fileSource.hash) {\n\t\t\t\t\t\talreadyUpToDate = true\n\t\t\t\t\t\tcompletionStatus = CompletionStatus.ALREADY_EXISTS_VALIDATED\n\n\t\t\t\t\t\t// Update the manifest file\n\t\t\t\t\t\tcachedFile = (cachedFile ?: ManifestFile.File()).also {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tit.hash = metadata.getHashObj(index)\n\t\t\t\t\t\t\t} catch (e: Exception) {\n\t\t\t\t\t\t\t\terr = e\n\t\t\t\t\t\t\t\treturn\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tit.isOptional = isOptional\n\t\t\t\t\t\t\tit.cachedLocation = metadata.destURI.rebase(packFolder)\n\t\t\t\t\t\t\tmetadata.linkedFile?.let { linked ->\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tit.linkedFileHash = linked.hash\n\t\t\t\t\t\t\t\t} catch (e: Exception) {\n\t\t\t\t\t\t\t\t\terr = e\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (e: RequestException) {\n\t\t\t\t// Ignore exceptions; if the file doesn't exist we'll be downloading it\n\t\t\t} catch (e: IOException) {\n\t\t\t\t// Ignore exceptions; if the file doesn't exist we'll be downloading it\n\t\t\t}\n\t\t}\n\t}\n\n\tfun download(packFolder: PackwizFilePath, clientHolder: ClientHolder) {\n\t\tif (err != null) return\n\n\t\t// Exclude wrong-side and optional false files\n\t\tcachedFile?.let {\n            val wrongSide = !correctSide()\n            val wrongOS = !correctOS()\n            val disabled = it.isOptional && it.optionValue\n\n            val (deletedStatus, skippedStatus) = when {\n        
[download]
url = "https://cdn.modrinth.com/data/1bokaNcj/versions/jSwPt0Wh/Xaeros_Minimap_25.2.6_NeoForge_1.21.jar"
hash-format = "sha512"
hash = "28372023d4476175a014f694825f5d3f291b5606261b8139b5365ab45abf87392fa2ebbd01b02ade579a870fa2105ebb8d141bb6bfa5b91c26aa1cb1fa34b919"

[update]
[update.modrinth]
mod-id = "1bokaNcj"
version = "jSwPt0Wh"
